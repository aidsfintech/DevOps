빗버킷은 일단 운영서버_master branch_와 개발서버_develop_ 분리에 사용된다고 이해

대체제로는 github, gitlab이 있음
https://m.blog.naver.com/dlwhdgur20/221006619001

이클립스에 git repository를 연동해서 공동 git에 share가능
그리고 commits에 참여자들의 커밋확인가능

그리고 커밋별로 키값이 부여되서 무엇이 변동된지 알수있다고 한다. 느낌이 해쉬값

syncronize workspace를 통해서 전체 한꺼번에 업로드 또는 다운로드가 아니라,
변동폴더만 파악해서 업로드 또는 다운로드


--실습
1. repo를 만든다
 이걸 하면 clone이라는 깃링크가 생성된다. 이를 통해서 이클립스와 연동

2. 이클립스와 빗버킷 사이트 서버 연결
 이클립스 windows의 show view 탭에서 Git 항목 들어가서 Git Repositories 클릭
그러면 영상과 같은 항목이 눈에 보이고, 영상에는 말로, clone blabla지만 
원통도형에 초록색 화살표가 우리가 찾는 것이다.

별도의 설정없이 일단 다 next하다가 finish하면된다.
참고로 이 과정에서 갑자기 로컬경로를 요구하는데, 내 컴퓨터에 중앙깃과 소통할 로컬 깃을
만드는과정으로 보인다.

2번째부터는 영상과같은 스텝을 밟긴한다.

3. 현재 로컬에 있는 프로젝트를 마스터에 올리기-1
 해당프로젝트 우클릭, Team 탭, Share project 탭 클릭하고, 
'우선 '도착할 곳은 2번 스텝에서 만든 내 컴퓨터 내 빗버킷 깃위치로 잡는다.
여기가 일종의 빗버킷과 연락할 지정장소, 이때 기본값으로 설정하면 안된다.

이 다음부터는 Team 탭으로 들어가면 Share project대신 다른 것들이 뜨고, 그중 syncronize가 중요.

3. 현재 로컬에 있는 프로젝트를 마스터에 올리기-2
 위에 이어서 synchronyze workspace 클릭 참고로 아직 올라간건 아니라고 한다.
그 다음 자동으로 뜬 synchronize 탭에서 review 프로젝트를 우클릭하여 add to index를 한다.
원론적인 관리 및 처리를 위한 인덱싱으로 보인다. 서버 업로드 전에
그 다음 commits를 클릭

그러면 Git Staging 탭에 unstaged와 staged가 나뉘는데, 후자가 인덱스된 애들이라고한다.
아마도 새로운 파일과 그렇지 않은 것을 구분하는 것으로 보인다.

그리고 업로드를 하면서 개발자의 코멘트를 commit message에 남긴다고한다.



--실습 2 브랜치 관리

1. 브랜치 생성
이제 개발서버와 운영서버를 따로따로 접근하기 위해 브랜치를 설정한다.
이때 흔히 마스터 아래 디벨럽 가지를 만든다고 한다. 그냥하위라는 큰 개념인듯

우선 빗버킷 상에서 마스터 브랜치 하위에 develop을 만들고 이에 상응하여
내 로컬 깃에도 Branches를 우클릭하여 switch to의 new branch를 통해서 develop을 만든다.

2. 이클립스 상 프로젝트 설정
 프로젝트 우클릭, Team, remote, configure blabal 들어가면
ref mapping이란 해괴한 경로가 나온다. 참고로 ref는 reference로 보인다.
이러한 경로를 수정하기위해 경로 선택ㅎ후 modify 클릭해봤다가

영상에서 급히 advanced로 들어감. 거기서 
Sourcd ref 에서 develop을 선택 후 add spec 클릭 후

현재 경로가 2개라 이전꺼 지우면 됨. 그러면 다시금 해괴한 경로가 비교적 명확해짐,
로컬develop깃폴더에서 : 빗버킷 대응장소

3. 커밋을 위해선 '변동사항'이 있어야하므로, 주석 추가 호 commit and push


-- 실습3 develop의 변화를 master에 반영
1. 빗버킷의 pull requests 탭 클릭, create a pull request 클릭 후, 일단은 별다른 설정 무
참고로, close branch 탭이란
개발 브랜치가 1회성인 경우 한번 합친 후 하위 가지가 사라진다고 한다.

2. 실행한 뒤, 추가된 내용과 사라진 내용을 볼수있다. 다만 아직 Merge를 안눌렀기 때문에
변동사항 만 파악한 것이 전부다.

3.  최종권한자가 Merge 버튼을 클릭함으로써 변동사항이 반영되는것이다.
 